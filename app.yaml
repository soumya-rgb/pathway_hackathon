
$sources:
  # File System connector, reading data locally.
  - !pw.io.fs.read
    path: data/Q5
    format: binary
    with_metadata: true
    post_processor: !pw.udfs.PythonLambda
      code: |
        def process(doc):
            # Assign topic based on folder or filename
            doc.metadata["topic"] = doc.metadata.get("folder", "general")
            #doc.metadata["topic"] = "electromagnetism"
            # Content type: lesson or quiz
            if "quiz" in doc.metadata.get("filename", "").lower():
                doc.metadata["content_type"] = "quiz"
            else:
                doc.metadata["content_type"] = "lesson"
            
            # Difficulty assignment based on filename
            fname = doc.metadata.get("filename", "").lower()
            if "easy" in fname:
                doc.metadata["difficulty"] = "easy"
            elif "medium" in fname:
                doc.metadata["difficulty"] = "medium"
            elif "hard" in fname:
                doc.metadata["difficulty"] = "hard"
            else:
                doc.metadata["difficulty"] = "medium"  # default
            
            '''doc.metadata["student_mastery"] = {
                "student_1": 0.5,
                "student_2": 0.8
            }'''
            doc.metadata["student_mastery_student_1"] = 0.5
            doc.metadata["student_mastery_student_2"] = 0.8
            
            print("Indexed document metadata:", doc.metadata)  #prints the metadat of doc
            return doc

  

$llm: !pw.xpacks.llm.llms.LiteLLMChat
  model: "gemini/gemini-2.5-flash"
  retry_strategy: !pw.udfs.ExponentialBackoffRetryStrategy
    max_retries: 6
  cache_strategy: !pw.udfs.DefaultCache {}
  temperature: 0
  capacity: 8

$embedder: !pw.xpacks.llm.embedders.GeminiEmbedder
  model: "gemini-embedding-001"
  cache_strategy: !pw.udfs.DefaultCache {}

# Defines the splitter settings for dividing text into smaller chunks.
$splitter: !pw.xpacks.llm.splitters.TokenCountSplitter
  max_tokens: 400

# Configures the parser for processing and extracting information from documents. more parser available checkout https://pathway.com/developers/user-guide/llm-xpack/parsers/
$parser: !pw.xpacks.llm.parsers.DoclingParser
  cache_strategy: !pw.udfs.DefaultCache {}

# Sets up the retriever factory for indexing and retrieving documents.
$retriever_factory: !pw.stdlib.indexing.BruteForceKnnFactory
  reserved_space: 1000
  embedder: $embedder
  metric: !pw.stdlib.indexing.BruteForceKnnMetricKind.COS

# Manages the storage and retrieval of documents for the RAG template.
$document_store: !pw.xpacks.llm.document_store.DocumentStore
  docs: $sources
  parser: $parser
  splitter: $splitter
  retriever_factory: $retriever_factory

# Configures the question-answering component using the RAG approach.
question_answerer: !pw.xpacks.llm.question_answering.AdaptiveRAGQuestionAnswerer
  llm: $llm
  indexer: $document_store
  n_starting_documents: 2
  factor: 2
  max_iterations: 4

host: "0.0.0.0"
port: 8000

# Activate on-disk caching for UDFs for which `cache_strategy` is set
with_cache: true

